node  {
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/teambit/bit.git']]])
    //properties([[$class: 'ParametersDefinitionProperty', parameterDefinitions: [[$class: 'ChoiceParameterDefinition', choices: 'stage\nproduction', description: '', name: 'environment']]]])
    //checkout scm
	def releaseServer = "${env.BIT_STAGE_SERVER}"
	def app = "bit"
	def currentVersion = sh script: 'cat package.json | grep version | head -1 | awk -F: \'{ print $2 }\' | sed \'s/[",]//g\' ' , returnStdout: true
	currentVersion = currentVersion.replaceAll("\\s","")
	def tarName ="bit-${currentVersion}-brew.tar.gz"

    try {
    stage 'remove old zip files '
    sh("rm -rf *.tar.gz  && rm -rf ./distribution")
    sh("rm -rf ./node_modules")

    stage 'Running tar'
    sh('./scripts/build-tar.sh tar')

    stage 'Running brew'
    sh("./scripts/build-brew.sh ")

    stage 'upload to repo'
    def server = Artifactory.server 'Bitsrc-artifactory'
          def uploadSpec = """{
            "files": [
              {
                "pattern": "distribution/brew_pkg/bit-${currentVersion}-brew.tar.gz",
                "target": "bit-brew/development/bit/${currentVersion}/"
              }
           ]
          }"""

     server.upload(uploadSpec)

     stage 'notify release server'
     notifyReleaseServer(currentVersion,releaseServer+"/update","${ArtifactRepo}/bit-brew/development/bit/${currentVersion}/${tarName}","brew")
        slackSend channel: '#deployment', color: 'good', message: 'Mac: development - https://github.com/teambit/bit/blob/master/CHANGELOG.md'

    }
     catch (err) {
           slackSend channel: '#deployment', color: 'error', message: "Mac: Failed to build bit-bin  ${err}"
             currentBuild.result = 'FAILURE'
        }


}

import groovy.json.JsonOutput
def notifyReleaseServer(version,url,packageUrl,method) {

    def payload = JsonOutput.toJson(version : version,
                  method: "${method}",
                  file: "${packageUrl}")

    def post = "curl -d '${payload.toString()}' -H 'Content-Type: application/json' ${url} -u ${releaseServerToken}"

    sh ("${post}")
}
