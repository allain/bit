pipeline {
    agent any
    stages {
        stage('build') {
            steps {
                sh('./scripts/build-tar.sh linux')
                sh('./scripts/build-deb.sh')
            }
        }
        stage ('test'){
            steps {
                parallel (
                    "centos" : {
                        sh("docker run -v `pwd`/distribution:/packages -v `pwd`/tests:/tests gcr.io/cocycles-963/containers/bit-testing-centos:latest")
                        },
                    "ubuntu" : {
                        sh("docker run -v `pwd`/distribution:/packages -v `pwd`/tests:/tests gcr.io/cocycles-963/containers/bit-testing-ubuntu:latest")
                        }
                     )
                }
        }
        stage ('deploy to repo'){
                steps {
                    sh("mv bit-${currentVersion}.tar.gz ./distribution")
                    def debUrl = "${repo}/bit-deb/development/bit/${currentVersion}/bit_${currentVersion}_all.deb;deb.distribution=all;deb.component=development;deb.architecture=amd64"
                    sh("curl -u${REPO_TOKEN} -T ./distribution/bit_${currentVersion}_all.deb -XPUT '${debUrl}'")
                    deployToArtifactory("rpm","bit-yum/development/bit/${currentVersion}","${currentVersion}-1.noarch",null)
                    deployToArtifactory("tar.gz","bit-tar/development/bit/${currentVersion}","${currentVersion}","bit-tar/development/bit/${currentVersion}/")
                    }
            }
        stage ('notify release server'){
                steps {
                    notifyReleaseServer(currentVersion,releaseServer,"${repo}/bit-deb/development/bit/${currentVersion}/bit_${currentVersion}_all.deb","deb")
                    notifyReleaseServer(currentVersion,releaseServer,"${repo}/bit-yum/development/bit/${currentVersion}/bit-${currentVersion}-1.noarch.rpm","yum")
                    notifyReleaseServer(currentVersion,releaseServer,"${repo}/bit-tar/development/bit/${currentVersion}/bit-${currentVersion}-tar.gz","tar")
                  }
            }
    }

}


def deployToArtifactory(artifactSuffix,repo,version,target){
    def  currentTarget =  "${repo}/"
    if (target != null) {
    currentTarget =target
    }

    def server = Artifactory.server 'Bitsrc-artifactory'
    def uploadSpec = """{
        "files": [
        {
            "pattern": "distribution/bit-${version}.${artifactSuffix}",
            "target": "${currentTarget}"
        }
    ]
    }"""
    server.upload(uploadSpec)
}

def notifyReleaseServer(version,url,packageUrl,method) {
    def payload = """
        {"version": "$version",
        "method":"$method",
        "file": "$packageUrl"
        }
    """
    def response = httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: payload, url: "$url"
}
