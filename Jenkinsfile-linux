node  {
  checkout scm
	def releaseServer = "${env.BIT_STAGE_SERVER}" + "/update"
	def repo = "${env.EXTERNAL_REPO}"
	def currentVersion = sh script: 'cat package.json | grep version | head -1 | awk -F: \'{ print $2 }\' | sed \'s/[",]//g\' ' , returnStdout: true
	currentVersion = currentVersion.replaceAll("\\s","")
  try{
    stage ('Running tar'){
      sh("npm i -g bit-bin")
      sh('./scripts/build-tar.sh linux')
    }

    stage ('Running DEB & RPM'){
      sh('./scripts/build-deb.sh')
    }
    stage 'Run test'
    parallel (
        "stream 1" : {
            sh("docker run -v `pwd`/distribution:/packages -v `pwd`/tests:/tests gcr.io/cocycles-963/containers/bit-testing-centos:latest")
        },
        "stream 2" : {
            sh("docker run -v `pwd`/distribution:/packages -v `pwd`/tests:/tests gcr.io/cocycles-963/containers/bit-testing-ubuntu:latest")
            }
    )
    stage ('move tar to distribution'){
      sh("mv bit-${currentVersion}.tar.gz ./distribution")
    }
    stage ('deploy to repository'){
      def debUrl = "${repo}/bit-deb/development/bit/${currentVersion}/bit_${currentVersion}_all.deb;deb.distribution=all;deb.component=development;deb.architecture=amd64"
      sh("curl -u${REPO_TOKEN} -T ./distribution/bit_${currentVersion}_all.deb -XPUT '${debUrl}'")
      deployToArtifactory("rpm","bit-yum/development/bit/${currentVersion}","${currentVersion}-1.noarch",null)
      deployToArtifactory("tar.gz","bit-tar/development/bit/${currentVersion}","${currentVersion}","bit-tar/development/bit/${currentVersion}/")
    }
    stage ('notify release server'){
      notifyReleaseServer(currentVersion,releaseServer,"${repo}/bit-deb/development/bit/${currentVersion}/bit_${currentVersion}_all.deb","deb")
      notifyReleaseServer(currentVersion,releaseServer,"${repo}/bit-yum/development/bit/${currentVersion}/bit-${currentVersion}-1.noarch.rpm","yum")
      notifyReleaseServer(currentVersion,releaseServer,"${repo}/bit-tar/development/bit/${currentVersion}/bit-${currentVersion}-tar.gz","tar")
    }
   slackSend channel: '#deployment', color: 'good', message: 'Linux: development - https://github.com/teambit/bit/blob/master/CHANGELOG.md'
}
 catch (err) {
         slackSend channel: '#deployment', color: 'error', message: "Linux: Failed to build bit-bin ${err}"
         currentBuild.result = 'FAILURE'
    }
}

def deployToArtifactory(artifactSuffix,repo,version,target){
     def  currentTarget =  "${repo}/"
     if (target != null) {
      currentTarget =target
     }

     def server = Artifactory.server 'Bitsrc-artifactory'
      def uploadSpec = """{
        "files": [
          {
            "pattern": "distribution/bit-${version}.${artifactSuffix}",
            "target": "${currentTarget}"
          }
       ]
      }"""
      server.upload(uploadSpec)
}

def notifyReleaseServer(version,url,packageUrl,method) {
    def payload = """
        {"version": "$version",
         "method":"$method",
         "file": "$packageUrl"
         }
    """
    def response = httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: payload, url: "$url"

}
